on: 
  workflow_dispatch: 
    inputs: 
      
jobs: 
  TestPowerShellOnLinux: 
    runs-on: ubuntu-latest
    steps: 
      - name: InstallPester
        runs: |
          $Parameters = @{}
          $Parameters.PesterMaxVersion = ${env:PesterMaxVersion}
          foreach ($k in @($parameters.Keys)) {
              if ([String]::IsNullOrEmpty($parameters[$k])) {
                  $parameters.Remove($k)
              }
          }
          & {param(
          [string]
          $PesterMaxVersion = '4.99.99'
          )
          [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
          Install-Module -Name Pester -Repository PSGallery -Force -Scope CurrentUser -MaximumVersion $PesterMaxVersion -SkipPublish
erCheck -AllowClobber
          Import-Module Pester -Force -PassThru -MaximumVersion $PesterMaxVersion} @Parameters
        shell: pwsh
      - name: RunPester
        runs: |
          $Parameters = @{}
          $Parameters.ModulePath = ${env:ModulePath}
          $Parameters.PesterMaxVersion = ${env:PesterMaxVersion}
          foreach ($k in @($parameters.Keys)) {
              if ([String]::IsNullOrEmpty($parameters[$k])) {
                  $parameters.Remove($k)
              }
          }
          & {param(
          [string]
          $ModulePath,
          [string]
          $PesterMaxVersion = '4.99.99'
          )
          
          $orgName, $moduleName = $env:GITHUB_REPOSITORY -split "/"
          if (-not $ModulePath) {
              $orgName, $moduleName = $env:GITHUB_REPOSITORY -split "/"
              $ModulePath = ".\$moduleName.psd1"
          }
          Import-Module Pester -Force -PassThru -MaximumVersion $PesterMaxVersion | Out-Host
          Import-Module $ModulePath -Force -PassThru | Out-Host
          $result = 
              Invoke-Pester -PassThru -Verbose -OutputFile ".\$moduleName.TestResults.xml" -OutputFormat NUnitXml `
                  -CodeCoverage "$(Build.SourcesDirectory)\*-*.ps1" -CodeCoverageOutputFile ".\$moduleName.Coverage.xml"
          
          if ($result.FailedCount -gt 0) {
              throw "$($result.FailedCount) tests failed."
          }
          } @Parameters
        shell: pwsh
